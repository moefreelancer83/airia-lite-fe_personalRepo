import React, { useState, useEffect, useCallback } from "react";
import Head from 'next/head'
import { useConnection, useWallet } from "@solana/wallet-adapter-react";
import { LAMPORTS_PER_SOL, PublicKey } from "@solana/web3.js";
import { collection, doc, onSnapshot, query, writeBatch } from "firebase/firestore";
import { db } from "../firebase/firebase.config";
import 'firebase/firestore';
import Header from "../components/Header";
import { User } from "./whitelist";
import { mintEditionNft } from "../context/helper";

export default function Home() {

  const { connection } = useConnection();
  const wallet = useWallet();

  const [balance, setBalance] = useState<number>();
  const [whitelist, setWhitelist] = useState<User[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const handleMint = useCallback(async () => {
    await mintEditionNft(connection, wallet, setIsLoading);
  }, [wallet, connection]);

  useEffect(() => {
    (async () => {
      if (wallet?.publicKey) {
        const balance = await connection.getBalance(wallet.publicKey);
        setBalance(balance / LAMPORTS_PER_SOL);
      }
    })();
  }, [wallet, connection]);

  useEffect(() => {
    const collectionRefWhitelist = collection(db, "whitelist");
    const qWhitelist = query(collectionRefWhitelist);
    const unsubscribe = onSnapshot(qWhitelist, (snapshot) => {
      const whitelistData: any = snapshot.docs.map((doc) => ({
        ...doc.data(),
      }));
      // Use the fetched data here
      setWhitelist(whitelistData);
    });
    return () => {
      unsubscribe();
    };
  }, []);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="bg-[#0b1418] min-h-[100vh]">
        <Header balance={balance} />
        <div className="max-w-[840px] mx-auto py-[100px]">
          {whitelist.length === 0 ?
            <div className="border-2 border-[#e83c3c] bg-[#ffa6a6] grid place-content-center py-10">
              Sorry! you are not whitelisted
            </div>
            :
            whitelist.find((item) => item.minter === wallet.publicKey?.toBase58())?.mint !== "" ?
              <div className="border-2 border-[#3e85e2] bg-[#a6caff] grid place-content-center py-10">
                Sorry. you already have minted
              </div>
              :
              <div className="">
                <p className="text-primary text-sm">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc vel vestibulum nibh. Mauris eget sapien lectus. Nulla bibendum ornare euismod. Phasellus tortor metus, rhoncus dapibus pharetra sed, interdum vel quam. In hac habitasse platea dictumst. Suspendisse aliquam est feugiat sodales accumsan.</p><br />
                <div className="text-center">
                  <button
                    className="bg-first w-[200px] h-10 text-md uppercase font-bold mx-auto disabled:bg-[#999] disabled:pointer-events-none"
                    disabled={isLoading}
                    onClick={() => handleMint()}
                  >
                    {!isLoading ? "Mint" : "Minting..."}
                  </button>
                </div>
              </div>
          }
          {/* whitelist.find((item) => item.minter !== wallet.publicKey?.toBase58()) === undefined && */}
        </div>
      </main>
    </>
  )
}
