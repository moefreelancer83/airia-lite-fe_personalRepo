import React, { useState, useEffect } from "react";
import Head from 'next/head'
import { useConnection, useWallet } from "@solana/wallet-adapter-react";
import { LAMPORTS_PER_SOL, PublicKey } from "@solana/web3.js";
import Header from "../components/Header";
import Dropzone from 'react-dropzone';
import { collection, doc, onSnapshot, query, writeBatch } from "firebase/firestore";
import { db } from "../firebase/firebase.config";
import 'firebase/firestore';
import cn from 'classnames';
import { successAlert } from "../components/ToastGroup";
import moment from "moment";

export interface User {
  minter: string,
  mint: string,
  mintDate: 0,
  createAt: number,
  updateAt: number,
}

export default function LeaderboardPage() {

  const { connection } = useConnection();
  const wallet = useWallet();

  const [balance, setBalance] = useState(0);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    (async () => {
      if (wallet?.publicKey) {
        const balance = await connection.getBalance(wallet.publicKey);
        setBalance(balance / LAMPORTS_PER_SOL);
      }
    })();
  }, [wallet, connection]);

  const [newWallets, setNewWallets] = useState<string[]>();
  const [whitelist, setWhitelist] = useState<User[]>()

  const handleDrop = async (acceptedFiles: any) => {
    let list: string[] = [];

    for (const file of acceptedFiles) {
      if (file.path && file.path.toLowerCase().endsWith('.json')) {
        const fileAsBinaryString = await file.arrayBuffer();
        const fileAsJson = JSON.parse(new TextDecoder().decode(fileAsBinaryString));
        list.push(...fileAsJson);
      }
    }

    //fetch unique wallets
    if (whitelist && whitelist.length !== 0) {
      const newList: string[] = [];
      for (let item of whitelist) {
        newList.push(item.minter)
      }
      let uniqueList = list.filter((item) => !newList?.includes(item));
      console.log(uniqueList);
      setNewWallets(uniqueList)
    } else {
      setNewWallets(list)
    }

  };

  const handleSave = async () => {
    if (newWallets && newWallets.length !== 0 && wallet.publicKey) {
      setIsLoading(true);
      const batch = writeBatch(db);
      for (const item of newWallets) {
        const nft = {
          minter: item,
          mint: "",
          mintDate: 0,
          createAt: new Date().getTime(),
          updateAt: new Date().getTime(),
        };
        const docRef = doc(collection(db, "whitelist"));
        batch.set(docRef, nft);
      }
      await batch.commit();
      setIsLoading(false);
      successAlert("Wallets registered!")
      setNewWallets([]);
    }
  };

  useEffect(() => {
    const collectionRefWhitelist = collection(db, "whitelist");
    const qWhitelist = query(collectionRefWhitelist);
    const unsubscribe = onSnapshot(qWhitelist, (snapshot) => {
      const whitelistData: any = snapshot.docs.map((doc) => ({
        ...doc.data(),
      }));
      // Use the fetched data here
      setWhitelist(whitelistData);
    });

    return () => {
      unsubscribe();
    };
  }, []);


  const handleItemsPerPageChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setItemsPerPage(Number(e.target.value));
  };

  const [itemsPerPage, setItemsPerPage] = useState(10);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="bg-[#0b1418] min-h-[100vh]">
        <Header balance={balance} />
        <div className="container mx-auto">
          <div className="w-[760px] mx-auto">

            <Dropzone onDrop={handleDrop}>
              {({ getRootProps, getInputProps }) => (
                <div {...getRootProps()} className="border-[1px] border-primary border-dashed grid place-content-center h-40 text-primary">
                  <input {...getInputProps()} />
                  <p>Drag and drop some files here, or click to select *.json files</p>
                </div>
              )}
            </Dropzone>

            {newWallets && newWallets.length !== 0 &&
              <div className="flex items-center justify-between my-5">
                <p className="text-primary"><span className="text-first text-bold">{newWallets?.length}</span> Wallets</p>
                <div>
                  <button className="bg-[#777] uppercase font-bold w-[100px] py-2 px-5 text-sm mr-2" onClick={() => setNewWallets([])}>cancel</button>
                  <button className="bg-first uppercase font-bold w-[100px] py-2 px-5 text-sm" onClick={handleSave} disabled={isLoading}>{isLoading ? "Saving..." : "Save"}</button>
                </div>
              </div>
            }
            {whitelist && whitelist.length !== 0 &&
              <>
                <Table data={whitelist} itemsPerPage={itemsPerPage} handleItemsPerPageChange={handleItemsPerPageChange} />
              </>
            }
          </div>
        </div>
      </main>
    </>
  )
}


interface TableProps {
  data: User[];
  itemsPerPage: number;
  handleItemsPerPageChange: any;
}
const Table: React.FC<TableProps> = ({ data, itemsPerPage, handleItemsPerPageChange }) => {
  const [currentPage, setCurrentPage] = useState(1);

  const totalPages = Math.ceil(data.length / itemsPerPage);

  const handlePageClick = (pageNumber: number) => {
    setCurrentPage(pageNumber);
  };

  const tableData = data.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  return (
    <div className="mt-8 pb-20  pt-10 border-t-[1px] border-primary">
      <div className="flex items-center justify-between mt-2">
        <h5 className="text-lg text-primary"><span className="text-first">{data.length}</span> Wallets</h5>
        <div className="flex items-center">
          <label className="flex items-center justify-end mr-2">
            <span className="text-primary mr-1 text-sm">Items per page:</span>
            <select value={itemsPerPage} onChange={handleItemsPerPageChange}>
              <option value={10}>10</option>
              <option value={20}>20</option>
              <option value={50}>50</option>
              <option value={100}>100</option>
            </select>
          </label>
          <div className="flex justify-center items-center">
            <button
              className={cn(
                'px-4 py-1 text-sm border rounded-l border-primary',
                currentPage === 1 ? 'opacity-50 cursor-not-allowed text-[#cbefff59]' : ' text-primary bg-blue-700'
              )}
              onClick={() => handlePageClick(currentPage - 1)}
              disabled={currentPage === 1}
            >
              Previous
            </button>
            {Array.from({ length: totalPages }, (_, i) => (
              <button
                key={i + 1}
                className={cn(
                  'px-4 py-1 text-sm border border-primary',
                  currentPage === i + 1 ? ' text-primary' : 'text-[#cbefff59]'
                )}
                onClick={() => handlePageClick(i + 1)}
                disabled={currentPage === i + 1}
              >
                {i + 1}
              </button>
            ))}
            <button
              className={cn(
                'px-4 py-1 text-sm border rounded-r border-primary',
                currentPage === totalPages ? 'opacity-50 cursor-not-allowed text-[#cbefff59] border-primary' : ' text-primary bg-blue-700'
              )}
              onClick={() => handlePageClick(currentPage + 1)}
              disabled={currentPage === totalPages}
            >
              Next
            </button>
          </div>
        </div>
      </div>
      <table className="text-primary w-full mt-5">
        <thead>
          <tr>
            <th className="border-b-2 py-2 border-[#cbefff3d]">Mint Address</th>
            <th className="border-b-2 py-2 border-[#cbefff3d]">Mint</th>
            <th className="border-b-2 py-2 border-[#cbefff3d]">Mint Date</th>
          </tr>
        </thead>
        <tbody>
          {tableData.map((user: User, key) => (
            <tr key={key}>
              <td align="left" className="py-3 border-b-[1px] border-[#cbefff3d]">{user.minter.slice(0, 4)}...{user.minter.slice(-4)}</td>
              <td align="center" className="py-3 border-b-[1px] border-[#cbefff3d]">{user.mint !== "" ? user.mint : "---"}</td>
              <td align="center" className="py-3 border-b-[1px] border-[#cbefff3d]">{user.mintDate !== 0 ? moment(user.mintDate).fromNow() : "---"}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};